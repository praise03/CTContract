// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyOrder extends ethereum.Event {
  get params(): BuyOrder__Params {
    return new BuyOrder__Params(this);
  }
}

export class BuyOrder__Params {
  _event: BuyOrder;

  constructor(event: BuyOrder) {
    this._event = event;
  }

  get tokenContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SellOrder extends ethereum.Event {
  get params(): SellOrder__Params {
    return new SellOrder__Params(this);
  }
}

export class SellOrder__Params {
  _event: SellOrder;

  constructor(event: SellOrder) {
    this._event = event;
  }

  get tokenContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class logDisperce extends ethereum.Event {
  get params(): logDisperce__Params {
    return new logDisperce__Params(this);
  }
}

export class logDisperce__Params {
  _event: logDisperce;

  constructor(event: logDisperce) {
    this._event = event;
  }

  get swapAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receivedTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensToDistributePerUser(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fundedSubscriberCount(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get fundedSubscribers(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }
}

export class Contract__checkLogResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class Contract__checkLogInputLogStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get txHash(): Bytes {
    return this[2].toBytes();
  }

  get blockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get blockHash(): Bytes {
    return this[4].toBytes();
  }

  get source(): Address {
    return this[5].toAddress();
  }

  get topics(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balances(subscriber: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(subscriber)
    ]);

    return result[0].toBigInt();
  }

  try_balances(subscriber: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(subscriber)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bytes32ToAddress(_address: Bytes): Address {
    let result = super.call(
      "bytes32ToAddress",
      "bytes32ToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_address)]
    );

    return result[0].toAddress();
  }

  try_bytes32ToAddress(_address: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bytes32ToAddress",
      "bytes32ToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bytes32ToUint256(_amount: Bytes): BigInt {
    let result = super.call(
      "bytes32ToUint256",
      "bytes32ToUint256(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_amount)]
    );

    return result[0].toBigInt();
  }

  try_bytes32ToUint256(_amount: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bytes32ToUint256",
      "bytes32ToUint256(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkLog(
    log: Contract__checkLogInputLogStruct,
    param1: Bytes
  ): Contract__checkLogResult {
    let result = super.call(
      "checkLog",
      "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(log), ethereum.Value.fromBytes(param1)]
    );

    return new Contract__checkLogResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkLog(
    log: Contract__checkLogInputLogStruct,
    param1: Bytes
  ): ethereum.CallResult<Contract__checkLogResult> {
    let result = super.tryCall(
      "checkLog",
      "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(log), ethereum.Value.fromBytes(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__checkLogResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoter(): Address {
    let result = super.call("quoter", "quoter():(address)", []);

    return result[0].toAddress();
  }

  try_quoter(): ethereum.CallResult<Address> {
    let result = super.tryCall("quoter", "quoter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscriberCount(): i32 {
    let result = super.call("subscriberCount", "subscriberCount():(uint8)", []);

    return result[0].toI32();
  }

  try_subscriberCount(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "subscriberCount",
      "subscriberCount():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  uniswapRouter(): Address {
    let result = super.call("uniswapRouter", "uniswapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapRouter",
      "uniswapRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userBalance(user: Address): BigInt {
    let result = super.call("userBalance", "userBalance(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_userBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBalance",
      "userBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConvertExactMaticToTokenCall extends ethereum.Call {
  get inputs(): ConvertExactMaticToTokenCall__Inputs {
    return new ConvertExactMaticToTokenCall__Inputs(this);
  }

  get outputs(): ConvertExactMaticToTokenCall__Outputs {
    return new ConvertExactMaticToTokenCall__Outputs(this);
  }
}

export class ConvertExactMaticToTokenCall__Inputs {
  _call: ConvertExactMaticToTokenCall;

  constructor(call: ConvertExactMaticToTokenCall) {
    this._call = call;
  }

  get _tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConvertExactMaticToTokenCall__Outputs {
  _call: ConvertExactMaticToTokenCall;

  constructor(call: ConvertExactMaticToTokenCall) {
    this._call = call;
  }
}

export class ConvertTokenToMaticCall extends ethereum.Call {
  get inputs(): ConvertTokenToMaticCall__Inputs {
    return new ConvertTokenToMaticCall__Inputs(this);
  }

  get outputs(): ConvertTokenToMaticCall__Outputs {
    return new ConvertTokenToMaticCall__Outputs(this);
  }
}

export class ConvertTokenToMaticCall__Inputs {
  _call: ConvertTokenToMaticCall;

  constructor(call: ConvertTokenToMaticCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConvertTokenToMaticCall__Outputs {
  _call: ConvertTokenToMaticCall;

  constructor(call: ConvertTokenToMaticCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EstimateMaticforTokenCall extends ethereum.Call {
  get inputs(): EstimateMaticforTokenCall__Inputs {
    return new EstimateMaticforTokenCall__Inputs(this);
  }

  get outputs(): EstimateMaticforTokenCall__Outputs {
    return new EstimateMaticforTokenCall__Outputs(this);
  }
}

export class EstimateMaticforTokenCall__Inputs {
  _call: EstimateMaticforTokenCall;

  constructor(call: EstimateMaticforTokenCall) {
    this._call = call;
  }

  get tokenAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EstimateMaticforTokenCall__Outputs {
  _call: EstimateMaticforTokenCall;

  constructor(call: EstimateMaticforTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EstimateTokenForMaticCall extends ethereum.Call {
  get inputs(): EstimateTokenForMaticCall__Inputs {
    return new EstimateTokenForMaticCall__Inputs(this);
  }

  get outputs(): EstimateTokenForMaticCall__Outputs {
    return new EstimateTokenForMaticCall__Outputs(this);
  }
}

export class EstimateTokenForMaticCall__Inputs {
  _call: EstimateTokenForMaticCall;

  constructor(call: EstimateTokenForMaticCall) {
    this._call = call;
  }

  get MaticAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EstimateTokenForMaticCall__Outputs {
  _call: EstimateTokenForMaticCall;

  constructor(call: EstimateTokenForMaticCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteTradeAndDisperceCall extends ethereum.Call {
  get inputs(): ExecuteTradeAndDisperceCall__Inputs {
    return new ExecuteTradeAndDisperceCall__Inputs(this);
  }

  get outputs(): ExecuteTradeAndDisperceCall__Outputs {
    return new ExecuteTradeAndDisperceCall__Outputs(this);
  }
}

export class ExecuteTradeAndDisperceCall__Inputs {
  _call: ExecuteTradeAndDisperceCall;

  constructor(call: ExecuteTradeAndDisperceCall) {
    this._call = call;
  }

  get tokenContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteTradeAndDisperceCall__Outputs {
  _call: ExecuteTradeAndDisperceCall;

  constructor(call: ExecuteTradeAndDisperceCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class SwapExactMaticToTokenCall extends ethereum.Call {
  get inputs(): SwapExactMaticToTokenCall__Inputs {
    return new SwapExactMaticToTokenCall__Inputs(this);
  }

  get outputs(): SwapExactMaticToTokenCall__Outputs {
    return new SwapExactMaticToTokenCall__Outputs(this);
  }
}

export class SwapExactMaticToTokenCall__Inputs {
  _call: SwapExactMaticToTokenCall;

  constructor(call: SwapExactMaticToTokenCall) {
    this._call = call;
  }

  get _tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SwapExactMaticToTokenCall__Outputs {
  _call: SwapExactMaticToTokenCall;

  constructor(call: SwapExactMaticToTokenCall) {
    this._call = call;
  }
}

export class SwapTokenToMaticCall extends ethereum.Call {
  get inputs(): SwapTokenToMaticCall__Inputs {
    return new SwapTokenToMaticCall__Inputs(this);
  }

  get outputs(): SwapTokenToMaticCall__Outputs {
    return new SwapTokenToMaticCall__Outputs(this);
  }
}

export class SwapTokenToMaticCall__Inputs {
  _call: SwapTokenToMaticCall;

  constructor(call: SwapTokenToMaticCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SwapTokenToMaticCall__Outputs {
  _call: SwapTokenToMaticCall;

  constructor(call: SwapTokenToMaticCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
