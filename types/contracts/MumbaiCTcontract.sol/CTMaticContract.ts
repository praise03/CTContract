/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type LogStruct = {
  index: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
  txHash: PromiseOrValue<BytesLike>;
  blockNumber: PromiseOrValue<BigNumberish>;
  blockHash: PromiseOrValue<BytesLike>;
  source: PromiseOrValue<string>;
  topics: PromiseOrValue<BytesLike>[];
  data: PromiseOrValue<BytesLike>;
};

export type LogStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  string,
  string[],
  string
] & {
  index: BigNumber;
  timestamp: BigNumber;
  txHash: string;
  blockNumber: BigNumber;
  blockHash: string;
  source: string;
  topics: string[];
  data: string;
};

export interface CTMaticContractInterface extends utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "bytes32ToAddress(bytes32)": FunctionFragment;
    "bytes32ToUint256(bytes32)": FunctionFragment;
    "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes)": FunctionFragment;
    "convertExactMaticToToken(address)": FunctionFragment;
    "convertTokenToMatic(uint256,address)": FunctionFragment;
    "estimateMaticforToken(uint256,address)": FunctionFragment;
    "estimateTokenForMatic(uint256,address)": FunctionFragment;
    "executeTradeAndDisperce(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "quoter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "subscribe()": FunctionFragment;
    "subscriberCount()": FunctionFragment;
    "swapExactMaticToToken(address)": FunctionFragment;
    "swapTokenToMatic(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "userBalance(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balances"
      | "bytes32ToAddress"
      | "bytes32ToUint256"
      | "checkLog"
      | "convertExactMaticToToken"
      | "convertTokenToMatic"
      | "estimateMaticforToken"
      | "estimateTokenForMatic"
      | "executeTradeAndDisperce"
      | "owner"
      | "performUpkeep"
      | "quoter"
      | "renounceOwnership"
      | "subscribe"
      | "subscriberCount"
      | "swapExactMaticToToken"
      | "swapTokenToMatic"
      | "transferOwnership"
      | "uniswapRouter"
      | "userBalance"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToUint256",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLog",
    values: [LogStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertExactMaticToToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTokenToMatic",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateMaticforToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateTokenForMatic",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTradeAndDisperce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "quoter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscriberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactMaticToToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToMatic",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkLog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertExactMaticToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertTokenToMatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateMaticforToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateTokenForMatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTradeAndDisperce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactMaticToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToMatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BuyOrder(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SellOrder(address,uint256,address)": EventFragment;
    "logDisperce(uint256,uint256,uint256,uint8,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logDisperce"): EventFragment;
}

export interface BuyOrderEventObject {
  tokenContractAddress: string;
  amount: BigNumber;
  recipient: string;
}
export type BuyOrderEvent = TypedEvent<
  [string, BigNumber, string],
  BuyOrderEventObject
>;

export type BuyOrderEventFilter = TypedEventFilter<BuyOrderEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SellOrderEventObject {
  tokenContractAddress: string;
  amount: BigNumber;
  recipient: string;
}
export type SellOrderEvent = TypedEvent<
  [string, BigNumber, string],
  SellOrderEventObject
>;

export type SellOrderEventFilter = TypedEventFilter<SellOrderEvent>;

export interface logDisperceEventObject {
  swapAmount: BigNumber;
  receivedTokens: BigNumber;
  tokensToDistributePerUser: BigNumber;
  fundedSubscriberCount: number;
  fundedSubscribers: string[];
}
export type logDisperceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number, string[]],
  logDisperceEventObject
>;

export type logDisperceEventFilter = TypedEventFilter<logDisperceEvent>;

export interface CTMaticContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CTMaticContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    bytes32ToAddress(
      _address: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytes32ToUint256(
      _amount: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkLog(
      log: LogStruct,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    convertExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateMaticforToken(
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateTokenForMatic(
      MaticAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTradeAndDisperce(
      tokenContractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoter(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriberCount(overrides?: CallOverrides): Promise<[number]>;

    swapExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    userBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balances(
    subscriber: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bytes32ToAddress(
    _address: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  bytes32ToUint256(
    _amount: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkLog(
    log: LogStruct,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  convertExactMaticToToken(
    _tokenOut: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertTokenToMatic(
    amountIn: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateMaticforToken(
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateTokenForMatic(
    MaticAmount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTradeAndDisperce(
    tokenContractAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoter(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriberCount(overrides?: CallOverrides): Promise<number>;

  swapExactMaticToToken(
    _tokenOut: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokenToMatic(
    amountIn: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  userBalance(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToAddress(
      _address: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    bytes32ToUint256(
      _amount: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLog(
      log: LogStruct,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    convertExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    convertTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateMaticforToken(
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateTokenForMatic(
      MaticAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTradeAndDisperce(
      tokenContractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    quoter(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    subscribe(overrides?: CallOverrides): Promise<void>;

    subscriberCount(overrides?: CallOverrides): Promise<number>;

    swapExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    userBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyOrder(address,uint256,address)"(
      tokenContractAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): BuyOrderEventFilter;
    BuyOrder(
      tokenContractAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): BuyOrderEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SellOrder(address,uint256,address)"(
      tokenContractAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): SellOrderEventFilter;
    SellOrder(
      tokenContractAddress?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      recipient?: null
    ): SellOrderEventFilter;

    "logDisperce(uint256,uint256,uint256,uint8,address[])"(
      swapAmount?: null,
      receivedTokens?: null,
      tokensToDistributePerUser?: null,
      fundedSubscriberCount?: null,
      fundedSubscribers?: null
    ): logDisperceEventFilter;
    logDisperce(
      swapAmount?: null,
      receivedTokens?: null,
      tokensToDistributePerUser?: null,
      fundedSubscriberCount?: null,
      fundedSubscribers?: null
    ): logDisperceEventFilter;
  };

  estimateGas: {
    balances(
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToAddress(
      _address: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToUint256(
      _amount: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLog(
      log: LogStruct,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateMaticforToken(
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateTokenForMatic(
      MaticAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTradeAndDisperce(
      tokenContractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriberCount(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    userBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32ToAddress(
      _address: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32ToUint256(
      _amount: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLog(
      log: LogStruct,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateMaticforToken(
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateTokenForMatic(
      MaticAmount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTradeAndDisperce(
      tokenContractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriberCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactMaticToToken(
      _tokenOut: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenToMatic(
      amountIn: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
